{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/rust_learning/03-index",
    "result": {"data":{"site":{"siteMetadata":{"title":"blog | hzuika","docsLocation":"https://github.com/hzuika/blog/tree/master/content"}},"mdx":{"fields":{"id":"221da65e-be40-504b-8a33-6c9a83ea79ea","title":"Rustの演算子オーバーロード(インデックス)","slug":"/rust_learning/03-index"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Rustの演算子オーバーロード(インデックス)\",\n  \"metaTitle\": \"Learning Rust 03\",\n  \"metaDescription\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Rust\\u306E\\u6F14\\u7B97\\u5B50\\u30AA\\u30FC\\u30D0\\u30FC\\u30ED\\u30FC\\u30C9\"), mdx(\"p\", null, \"\\u30A4\\u30F3\\u30C7\\u30C3\\u30AF\\u30B9\\u6F14\\u7B97\\u5B50(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[]\"), \")\\u3092\\u30AA\\u30FC\\u30D0\\u30FC\\u30ED\\u30FC\\u30C9\\u3057\\u3066\\uFF0C\\u914D\\u5217\\u306E\\u3088\\u3046\\u306B\\u69CB\\u9020\\u4F53\\u306B\\u30A2\\u30AF\\u30BB\\u30B9\\u3067\\u304D\\u308B\\u3088\\u3046\\u306B\\u3057\\u307E\\u3059\\uFF0E\"), mdx(\"h2\", null, \"\\u30B9\\u30E9\\u30A4\\u30B9\\u3092\\u8FD4\\u3059\\u95A2\\u6570\\u306E\\u4F5C\\u6210\"), mdx(\"p\", null, \"\\u305D\\u306E\\u524D\\u306B\\uFF0C\\u69CB\\u9020\\u4F53\\u304B\\u3089\\u30B9\\u30E9\\u30A4\\u30B9\\u3092\\u8FD4\\u3059\\u95A2\\u6570\\u3092\\u4F5C\\u6210\\u3057\\u307E\\u3059\\uFF0E\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from_raw_parts\"), \" \\u95A2\\u6570\\u3092\\u4F7F\\u7528\\u3057\\u3066\\uFF0C\\u69CB\\u9020\\u4F53\\u3092\\u30DD\\u30A4\\u30F3\\u30BF\\u306B\\u5909\\u63DB\\u3057\\u3066\\uFF0C\\u30B9\\u30E9\\u30A4\\u30B9\\u306B\\u5909\\u63DB\\u3057\\u307E\\u3059\\uFF0E\\n\\u30DD\\u30A4\\u30F3\\u30BF\\u3078\\u306E\\u5909\\u63DB\\u304C\\u3042\\u308B\\u305F\\u3081\\uFF0C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unsafe\"), \" \\u3067\\u3059\\uFF0E\"), mdx(\"p\", null, \"\\u53C2\\u8003: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/questions/62240126/is-it-legal-to-cast-a-struct-to-an-array\"\n  }, \"rust - Is it legal to cast a struct to an array? - Stack Overflow\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rs\"\n  }, \"impl Float3 {\\n    fn as_slice(&self) -> &[f32] {\\n        unsafe { std::slice::from_raw_parts(self as *const Self as *const f32, 3) }\\n    }\\n\\n    fn as_slice_mut(&mut self) -> &mut [f32] {\\n        unsafe { std::slice::from_raw_parts_mut(self as *mut Self as *mut f32, 3) }\\n    }\\n}\\n\")), mdx(\"h2\", null, \"\\u30A4\\u30F3\\u30C7\\u30C3\\u30AF\\u30B9\\u6F14\\u7B97\\u5B50\\u306E\\u30AA\\u30FC\\u30D0\\u30FC\\u30ED\\u30FC\\u30C9\"), mdx(\"p\", null, \"\\u5148\\u307B\\u3069\\u306E\\u30B9\\u30E9\\u30A4\\u30B9\\u3092\\u4F5C\\u6210\\u3059\\u308B\\u95A2\\u6570\\u3092\\u4F7F\\u7528\\u3057\\u3066\\uFF0C\\u30A4\\u30F3\\u30C7\\u30C3\\u30AF\\u30B9\\u6F14\\u7B97\\u5B50\\u3092\\u30AA\\u30FC\\u30D0\\u30FC\\u30ED\\u30FC\\u30C9\\u3057\\u307E\\u3059\\uFF0E\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rs\"\n  }, \"impl std::ops::Index<usize> for Float3 {\\n    type Output = f32;\\n    fn index(&self, index: usize) -> &Self::Output {\\n        &self.as_slice()[index]\\n    }\\n}\\n\\nimpl std::ops::IndexMut<usize> for Float3 {\\n    fn index_mut(&mut self, index: usize) -> &mut Self::Output {\\n        &mut self.as_slice_mut()[index]\\n    }\\n}\\n\")), mdx(\"h1\", null, \"\\u30C6\\u30B9\\u30C8\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rs\"\n  }, \"#[cfg(test)]\\nmod tests {\\n    use crate::*;\\n\\n    #[test]\\n    fn test_as_slice() {\\n        let a = Float3 {\\n            x: 1.0,\\n            y: 2.0,\\n            z: 3.0,\\n        };\\n        let b = a.as_slice();\\n        assert_eq!(b[0], 1.0);\\n        assert_eq!(b[1], 2.0);\\n        assert_eq!(b[2], 3.0);\\n    }\\n\\n    #[test]\\n    fn test_as_slice_mut() {\\n        let mut a = Float3 {\\n            x: 1.0,\\n            y: 2.0,\\n            z: 3.0,\\n        };\\n        let b = a.as_slice_mut();\\n        b[0] = 4.0;\\n        b[1] = 5.0;\\n        b[2] = 6.0;\\n        assert_eq!(a.x, 4.0);\\n        assert_eq!(a.y, 5.0);\\n        assert_eq!(a.z, 6.0);\\n    }\\n\\n    #[test]\\n    fn test_index() {\\n        let a = Float3 {\\n            x: 1.0,\\n            y: 2.0,\\n            z: 3.0,\\n        };\\n        assert_eq!(a[0], 1.0);\\n        assert_eq!(a[1], 2.0);\\n        assert_eq!(a[2], 3.0);\\n    }\\n\\n    #[test]\\n    fn test_index_mut() {\\n        let mut a = Float3 {\\n            x: 1.0,\\n            y: 2.0,\\n            z: 3.0,\\n        };\\n        a[0] = 4.0;\\n        a[1] = 5.0;\\n        a[2] = 6.0;\\n        assert_eq!(a.x, 4.0);\\n        assert_eq!(a.y, 5.0);\\n        assert_eq!(a.z, 6.0);\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#rustの演算子オーバーロード","title":"Rustの演算子オーバーロード","items":[{"url":"#スライスを返す関数の作成","title":"スライスを返す関数の作成"},{"url":"#インデックス演算子のオーバーロード","title":"インデックス演算子のオーバーロード"}]},{"url":"#テスト","title":"テスト"}]},"parent":{"relativePath":"rust_learning/03-index.md"},"frontmatter":{"metaTitle":"Learning Rust 03","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/frs_cleanup","title":"Freestyle Cleanup"}}},{"node":{"fields":{"slug":"/","title":"このブログについて"}}},{"node":{"fields":{"slug":"/blender_ime","title":"BlenderとIMEについて"}}},{"node":{"fields":{"slug":"/rust_learning","title":"Rustの学習"}}},{"node":{"fields":{"slug":"/misc","title":"その他のメモ"}}},{"node":{"fields":{"slug":"/frs_reading","title":"Freestyle Reading Code"}}},{"node":{"fields":{"slug":"/introduction","title":"このブログについて"}}},{"node":{"fields":{"slug":"/blender_ime/03-console","title":"Python コンソールのIME入力実装"}}},{"node":{"fields":{"slug":"/blender_ime/02-texteditor","title":"テキストエディタのIME入力実装"}}},{"node":{"fields":{"slug":"/blender_ime/04-text_object","title":"テキストオブジェクトのIME入力実装"}}},{"node":{"fields":{"slug":"/rust_learning/01-struct","title":"Rustの構造体とテストコード"}}},{"node":{"fields":{"slug":"/rust_learning/03-index","title":"Rustの演算子オーバーロード(インデックス)"}}},{"node":{"fields":{"slug":"/rust_learning/04-arithmetic","title":"Rustの演算子オーバーロード(四則演算)"}}},{"node":{"fields":{"slug":"/blender_ime/01-check_ime_area","title":"エリアごとのIMEの有効/無効"}}},{"node":{"fields":{"slug":"/snippet","title":"スニペット"}}},{"node":{"fields":{"slug":"/frs_cleanup/01-delete_path","title":"Pathに関連するファイルの削除"}}},{"node":{"fields":{"slug":"/frs_cleanup/04-cppcheck_all_options","title":"cppcheckの全オプションを有効にして確認する"}}},{"node":{"fields":{"slug":"/frs_cleanup/05-compute_steerable_view_map","title":"SteerableViewMapを計算する部分を削除する"}}},{"node":{"fields":{"slug":"/frs_cleanup/02-delete_if0","title":"#if 0 ディレクティブの削除"}}},{"node":{"fields":{"slug":"/frs_cleanup/07-viewmapbuilder","title":"ViewMapBulder.cpp/hで使用されていない関数を削除する．"}}},{"node":{"fields":{"slug":"/frs_cleanup/09-wfillgrid_wsfillgrid","title":"WFillGrid.cpp/h, WSFillGrid.cpp/hを削除する．"}}},{"node":{"fields":{"slug":"/frs_cleanup/06-visibility_algo","title":"VisibilityAlgoのうち使用されていない部分を削除する"}}},{"node":{"fields":{"slug":"/frs_cleanup/11-restore_visibility_alog_in_dna","title":"削除したDNA内のVisibilityAlgoのEnumを元に戻す(コミット修正)"}}},{"node":{"fields":{"slug":"/frs_cleanup/03-delete_unused_function","title":"cppcheckを使用した未使用関数の削除"}}},{"node":{"fields":{"slug":"/frs_cleanup/10-delete_unused_function_manually","title":"その他の未使用の関数を調べる．"}}},{"node":{"fields":{"slug":"/frs_reading/01-frs_freestyle","title":"FRS_freestyle.hを読む"}}},{"node":{"fields":{"slug":"/frs_cleanup/12-delete_empty_files","title":"何も書かれていないファイルを削除する．"}}},{"node":{"fields":{"slug":"/frs_cleanup/13-delete_unused_files_manually","title":"未使用のファイルを調べて削除する．"}}},{"node":{"fields":{"slug":"/frs_cleanup/08-grid","title":"Grid.cpp/hで使用されていない関数を削除する．"}}},{"node":{"fields":{"slug":"/frs_reading/03-computeviewmap","title":"viewマップの構築"}}},{"node":{"fields":{"slug":"/frs_reading/05-indexed_face_set","title":"Indexed Face Setについて"}}},{"node":{"fields":{"slug":"/frs_reading/02-loadmesh","title":"メッシュの読み込み"}}},{"node":{"fields":{"slug":"/frs_reading/04-winged_edge","title":"Winged Edge データ構造について"}}},{"node":{"fields":{"slug":"/rust_learning/02-function","title":"Rustの関数"}}},{"node":{"fields":{"slug":"/setup","title":"ブログ設定"}}},{"node":{"fields":{"slug":"/rust_learning/05-partialeq","title":"Rustの比較"}}},{"node":{"fields":{"slug":"/rust_learning/06-constructor","title":"Rustのコンストラクタ(new スタティックメソッド)"}}}]}},"pageContext":{"id":"221da65e-be40-504b-8a33-6c9a83ea79ea"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}